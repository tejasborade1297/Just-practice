{
	"name": "agg and jiin",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "input",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "de",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "output",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmpID as string,",
				"          EmpName as string,",
				"          DeptID as string,",
				"          Salary as string,",
				"          JoiningDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          DeptID as string,",
				"          DeptName as string,",
				"          Location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1 aggregate(groupBy(DeptID),",
				"     {Total emp count} = count(EmpID)) ~> aggregate1",
				"aggregate1, source2 join(aggregate1@DeptID == source2@DeptID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['depid'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Depname = DeptName,",
				"          {Total emp count}",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}